{"version":3,"sources":["logo.svg","TodoInsert.js","TodoElement.js","App.js","axios-database.js","TodoApp.js","serviceWorker.js","index.js"],"names":["module","exports","todoInsert","props","Input","placeholder","type","value","onChange","event","onKeyDown","key","onSubmit","target","Button","color","onClick","onInsertExamples","disabled","sizeList","todoElement","edit","React","createRef","Grid","container","direction","justify","alignItems","TextField","style","width","task","onEdit","index","changeMode","textAlign","textDecoration","changeTextDecoration","onDelete","App","instance","axios","create","baseURL","TodoApp","state","inputText","todos","newText","this","setState","element","listTodo","id","length","lineThrough","push","insertDatabase","findIndex","keyURL","splice","deleteDatabase","updateDatabase","get","then","response","initialTodoList","catch","error","status","databaseList","data","hasOwnProperty","console","log","dataElement","post","name","put","delete","readDatabase","forEach","elem","todoList","map","TodoElement","editElement","bind","deleteElement","changeModeElement","changeTextDecorationElement","className","TodoInsert","insertTodo","insertExamples","updateInput","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","date","Date","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.be26d189.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport { Button, Input } from '@material-ui/core';\n\nconst todoInsert = (props) => {\n\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            props.onSubmit(event.target.value);\n        }\n    };\n    return (\n        <div>\n            <Input placeholder=\"Your next task\" type=\"text\" value={props.value} onChange={event => props.onChange(event)} onKeyDown={handleKeyDown}/>\n            <Button color=\"primary\" onClick={() => props.onSubmit()}>INSERT</Button>\n            <Button color=\"primary\" onClick={() => props.onInsertExamples()} disabled={props.sizeList != 0} >(EXAMPLES)</Button>\n        </div>\n    )\n};\n\nexport default todoInsert;\n","import React from 'react'\nimport { Button, TextField, Grid } from '@material-ui/core';\n\n\nconst todoElement = (props) => {\n\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            props.changeMode();\n        }\n    };\n\n    if (!props.edit) {\n        return (\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\">\n                    <div><p style={{width: '200px', textAlign: \"left\", textDecoration: props.textDecoration ? 'line-through' : ''}} onClick={props.changeTextDecoration}>{props.task}</p> </div>\n                    <Button onClick={props.changeMode}>Edit</Button>\n                    <Button color=\"secondary\" onClick={props.onDelete}>Delete</Button>\n                <br></br>\n            </Grid>\n        )\n    } else {\n        let input = React.createRef();\n        return (\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\">\n                <TextField style={{width: '200px'}} value={props.task} onChange={event => props.onEdit(event, props.index)} onKeyDown={handleKeyDown}/>\n                <Button onClick={props.changeMode}>Save</Button>\n                <br></br>\n            </Grid>\n        )\n    }\n\n};\n\nexport default todoElement;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import axios from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://react-todo-f7f3d.firebaseio.com/'\n    });\n\nexport default instance\n","import React, {Component} from 'react'\nimport TodoInsert from './TodoInsert'\nimport TodoElement from './TodoElement'\nimport './App.css';\nimport Aux from './hoc/Aux'\nimport WithClass from './hoc/WithClass'\nimport App from \"./App\";\nimport axios from './axios-database';\n\nclass TodoApp extends Component {\n    state = {\n        inputText : '',\n        todos: []\n    };\n\n    updateInput(event) {\n        // console.log(event.target.value);\n        let newText = event.target.value;\n        this.setState({inputText: newText})\n    }\n\n    insertTodo(element) {\n        let listTodo = this.state.todos;\n        var element = {id: listTodo.length, task: this.state.inputText, edit: false, lineThrough: false};\n        listTodo.push(element);\n        this.setState({todos: listTodo, inputText : ''});\n        // console.log(this);\n        this.insertDatabase(element);\n    }\n\n    editElement(event, index) {\n        let listTodo = this.state.todos;\n        listTodo[index].task = event.target.value;\n        this.setState({todos: listTodo});\n        // this.updateDatabase(listTodo[index])\n    }\n\n    deleteElement(id) {\n        const listTodo = this.state.todos;\n        let index = listTodo.findIndex(element => element.id == id)\n        const keyURL = listTodo[index].keyURL;\n        listTodo.splice(index, 1);\n        this.setState({todos: listTodo});\n        // console.log(this.state.todos);\n        this.deleteDatabase(keyURL);\n    }\n\n    changeModeElement(index) {\n        let listTodo = this.state.todos;\n        listTodo[index].edit = !listTodo[index].edit;\n        this.setState({todos: listTodo});\n        this.updateDatabase(listTodo[index])\n    }\n\n    changeTextDecorationElement(index) {\n        let listTodo = this.state.todos;\n        listTodo[index].lineThrough = !listTodo[index].lineThrough;\n        this.setState({todos: listTodo});\n        this.updateDatabase(listTodo[index])\n    }\n\n    readDatabase() {\n        axios.get('/todo.json')\n            .then(response => {\n                this.initialTodoList(response);\n            })\n            .catch(error => {this.initialTodoList(error)})\n    }\n\n    initialTodoList(response) {\n        if (response.status == 200) {\n            let databaseList = [];\n            for (let key in response.data) {\n                if (response.data.hasOwnProperty(key)) {\n                    response.data[key].keyURL = key;\n                    // response.data[key].edit = false;\n                    databaseList.push(response.data[key])\n                    console.log(response.data[key])\n                }\n            }\n            this.setState({todos: databaseList})\n        } else {\n            this.setState({\n                todos: [\n                    {id: 0, task: 'Make groceries', edit: false, lineThrough: false},\n                    {id: 1, task: 'Share items for sell', edit: false, lineThrough: false},\n                    {id: 2, task: 'Write an article on Reddit', edit: false, lineThrough: false},\n                    {id: 3, task: 'Edit some pictures', edit: false, lineThrough: false},\n                    {id: 4, task: 'Go to cinema', edit: false, lineThrough: false},]\n            })\n        }\n    }\n\n    insertDatabase(element){\n        const dataElement = {\n            id: element.id,\n            task: element.task,\n            edit: element.edit,\n            lineThrough: element.lineThrough\n        };\n        axios.post('/todo.json', dataElement)\n            .then(response => {\n                console.log('SUCCESS');\n                element.keyURL = response.data.name;\n            })\n            .catch(error => {console.log('ERROR')})\n    }\n\n    updateDatabase(element){\n        axios.put(`/todo/${element.keyURL}.json`,{edit: element.edit, id: element.id, lineThrough: element.lineThrough, task: element.task})\n            .then(response => {console.log(response)})\n            .catch(error => console.log(error))\n    }\n\n    deleteDatabase(keyURL){\n        axios.delete(`/todo/${keyURL}.json`)\n            .then(response => {console.log(response)})\n            .catch(error => {console.log(error)})\n    }\n\n    componentDidMount () {\n        this.readDatabase();\n    }\n\n    insertExamples () {\n        if (this.state.todos.length == 0) {\n            {\n                let todos = [\n                    {id: 0, task: 'Make groceries', edit: false, lineThrough: false},\n                    {id: 1, task: 'Share items for sell', edit: false, lineThrough: false},\n                    {id: 2, task: 'Write an article on Reddit', edit: false, lineThrough: false},\n                    {id: 3, task: 'Edit some pictures', edit: false, lineThrough: false},\n                    {id: 4, task: 'Go to cinema', edit: false, lineThrough: false},];\n                todos.forEach(elem => this.insertDatabase(elem));\n                this.setState({todos: todos})\n            }\n        }\n    }\n\n\n    render() {\n        let todoList = (<div>{this.state.todos.map((element, index) => { return (<TodoElement\n            task={element.task}\n            textDecoration={element.lineThrough}\n            edit={element.edit}\n            key={element.id}\n            index={index}\n            onEdit={this.editElement.bind(this)}\n            onDelete={() => this.deleteElement(element.id)}\n            changeMode={() => this.changeModeElement(index)}\n            changeTextDecoration={() => this.changeTextDecorationElement(index)}\n\n        />)})}</div>);\n\n        return (\n            <div className=\"App\">\n                <TodoInsert\n                    onSubmit={this.insertTodo.bind(this)}\n                    onInsertExamples={this.insertExamples.bind(this)}\n                    onChange={this.updateInput.bind(this)}\n                    sizeList={this.state.todos.length}\n                    value={this.state.inputText}/>\n                {todoList}\n\n            </div>\n        )\n    }\n}\nexport default TodoApp\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport TodoApp from './TodoApp'\nimport * as serviceWorker from './serviceWorker';\n// import Clock from './Clock'\n\n// ReactDOM.render(\n//   // <React.StrictMode>\n//   //   <App />\n//   // </React.StrictMode>,\n//     <TodoApp title={\"TODO App\"} />,\n//   document.getElementById('root')\n// );\nclass Clock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {date: new Date()};\n    }\n\n    componentDidMount() {\n        console.log('DidMount');\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n\n    componentWillUnmount() {\n        console.log('WillUnmount');\n        clearInterval(this.timerID);\n    }\n\n    tick() {\n        this.setState({\n            date: new Date()\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Witaj, świecie!</h1>\n                <h2>Aktualny czas: {this.state.date.toLocaleTimeString()}.</h2>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <TodoApp date={new Date()}/>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}